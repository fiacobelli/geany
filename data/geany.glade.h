char *s = N_("_Edit");
char *s = N_("_Format");
char *s = N_("I_nsert");
char *s = N_("Insert _ChangeLog Entry");
char *s = N_("Insert _Function Description");
char *s = N_("Insert _Multiline Comment");
char *s = N_("_More");
char *s = N_("Insert File _Header");
char *s = N_("Insert _GPL Notice");
char *s = N_("Insert _BSD License Notice");
char *s = N_("Insert Dat_e");
char *s = N_("invisible");
char *s = N_("_Insert \"include <...>\"");
char *s = N_("_Insert Alternative White Space");
char *s = N_("_Search");
char *s = N_("Open Selected F_ile");
char *s = N_("Find _Usage");
char *s = N_("Find _Document Usage");
char *s = N_("Go to _Tag Definition");
char *s = N_("Conte_xt Action");
char *s = N_("None");
char *s = N_("Basic");
char *s = N_("Current chars");
char *s = N_("Match braces");
char *s = N_("Preferences");
char *s = N_("Load files from the last session");
char *s = N_("Opens at startup the files from the last session");
char *s = N_("Load virtual terminal support");
char *s = N_("Whether the virtual terminal emulation (VTE) should be loaded at startup, disable it if you do not need it");
char *s = N_("Enable plugin support");
char *s = N_("<b>Startup</b>");
char *s = N_("Save window position and geometry");
char *s = N_("Saves the window position and geometry and restores it at the start");
char *s = N_("Confirm exit");
char *s = N_("Shows a confirmation dialog on exit");
char *s = N_("<b>Shutdown</b>");
char *s = N_("Startup path:");
char *s = N_("Path to start in when opening or saving files. Must be an absolute path.");
char *s = N_("Project files:");
char *s = N_("Path to start in when opening project files");
char *s = N_("Extra plugin path:");
char *s = N_("Geany looks by default in the global installation path and in the configuration directory. The path entered here will be searched additionally for plugins. Leave blank to disable.");
char *s = N_("<b>Paths</b>");
char *s = N_("Startup");
char *s = N_("Beep on errors or when compilation has finished");
char *s = N_("Whether to beep if an error occurred or when the compilation process has finished");
char *s = N_("Switch to status message list at new message");
char *s = N_("Switch to the status message tab (in the notebook window at the bottom) if a new status message arrives");
char *s = N_("Suppress status messages in the status bar");
char *s = N_("Removes all messages from the status bar. The messages are still displayed in the status messages window.");
char *s = N_("Auto-focus widgets (focus follows mouse)");
char *s = N_("Gives the focus automatically to widgets below the mouse cursor. Works for the main editor widget, the scribble, the toolbar search and goto line fields and the VTE.");
char *s = N_("Use Windows File Open/Save dialogs");
char *s = N_("Defines whether to use the native Windows File Open/Save dialogs or whether to use the GTK default dialogs");
char *s = N_("<b>Miscellaneous</b>");
char *s = N_("Always wrap search");
char *s = N_("Always wrap search around the document");
char *s = N_("Hide the Find dialog");
char *s = N_("Hide the Find dialog after clicking Find Next/Previous");
char *s = N_("Use the current word under the cursor for Find dialogs");
char *s = N_("Use current word under the cursor when opening the Find, Find in Files or Replace dialog and there is no selection");
char *s = N_("Use the current file's directory for Find in Files");
char *s = N_("<b>Search</b>");
char *s = N_("Use project-based session files");
char *s = N_("Whether to store a project's session files and open them when re-opening the project");
char *s = N_("Store project file inside the project base directory");
char *s = N_("When enabled, a project file is stored by default inside the project base directory when creating new projects instead of one directory above the base directory. You can still change the path of the project file in the New Project dialog.");
char *s = N_("<b>Projects</b>");
char *s = N_("Miscellaneous");
char *s = N_("General");
char *s = N_("Show symbol list");
char *s = N_("Toggle the symbol list on and off");
char *s = N_("Show documents list");
char *s = N_("Toggle the documents list on and off");
char *s = N_("Show sidebar");
char *s = N_("Position:");
char *s = N_("Left");
char *s = N_("Right");
char *s = N_("<b>Sidebar</b>");
char *s = N_("Bottom");
char *s = N_("<b>Message window</b>");
char *s = N_("Symbol list:");
char *s = N_("Message window:");
char *s = N_("Editor:");
char *s = N_("Sets the font for the message window");
char *s = N_("Sets the font for the symbol list");
char *s = N_("Sets the editor font");
char *s = N_("<b>Fonts</b>");
char *s = N_("Show status bar");
char *s = N_("Whether to show the status bar at the bottom of the main window");
char *s = N_("Interface");
char *s = N_("Show editor tabs");
char *s = N_("Show close buttons");
char *s = N_("Shows a small cross button in the file tabs to easily close files when clicking on it (requires restart of Geany)");
char *s = N_("Placement of new file tabs:");
char *s = N_("File tabs will be placed on the left of the notebook");
char *s = N_("File tabs will be placed on the right of the notebook");
char *s = N_("Next to current");
char *s = N_("Whether to place file tabs next to the current tab rather than at the edges of the notebook");
char *s = N_("Double-clicking hides all additional widgets");
char *s = N_("Calls the View->Toggle All Additional Widgets command");
char *s = N_("Switch to last used document after closing a tab");
char *s = N_("<b>Editor tabs</b>");
char *s = N_("Sidebar:");
char *s = N_("<b>Tab positions</b>");
char *s = N_("Notebook tabs");
char *s = N_("Show t_oolbar");
char *s = N_("_Append toolbar to the menu");
char *s = N_("Pack the toolbar to the main menu to save vertical space");
char *s = N_("Customize Toolbar");
char *s = N_("System _default");
char *s = N_("Images _and text");
char *s = N_("_Images only");
char *s = N_("_Text only");
char *s = N_("<b>Icon style</b>");
char *s = N_("S_ystem default");
char *s = N_("_Small icons");
char *s = N_("_Very small icons");
char *s = N_("_Large icons");
char *s = N_("<b>Icon size</b>");
char *s = N_("<b>Toolbar</b>");
char *s = N_("Toolbar");
char *s = N_("Line wrapping");
char *s = N_("Wrap the line at the window border and continue it on the next line. Note: line wrapping has a high performance cost for large documents so should be disabled on slow machines.");
char *s = N_("\"Smart\" home key");
char *s = N_("When \"smart\" home is enabled, the HOME key will move the caret to the first non-blank character of the line, unless it is already there, it moves to the very beginning of the line. When this feature is disabled, the HOME key always moves the caret to the start of the current line, regardless of its current position.");
char *s = N_("Disable Drag and Drop");
char *s = N_("Disable drag and drop completely in the editor window so you can't drag and drop any selections within or outside of the editor window");
char *s = N_("Code folding");
char *s = N_("Fold/unfold all children of a fold point");
char *s = N_("Fold or unfold all children of a fold point. By pressing the Shift key while clicking on a fold symbol the contrary behavior is used.");
char *s = N_("Use indicators to show compile errors");
char *s = N_("Whether to use indicators (a squiggly underline) to highlight the lines where the compiler found a warning or an error");
char *s = N_("Newline strips trailing spaces");
char *s = N_("Enable newline to strip the trailing spaces on the previous line");
char *s = N_("Line breaking column:");
char *s = N_("Comment toggle marker:");
char *s = N_("A string which is added when toggling a line comment in a source file, it is used to mark the comment as toggled.");
char *s = N_("<b>Features</b>");
char *s = N_("Features");
char *s = N_("Note: To apply these settings to all currently open documents, use <i>Project->Apply Default Indentation</i>.");
char *s = N_("Width:");
char *s = N_("The width in chars of a single indent");
char *s = N_("Auto-indent mode:");
char *s = N_("Detect type from file");
char *s = N_("Whether to detect the indentation type from file contents when a file is opened");
char *s = N_("T_abs and spaces");
char *s = N_("Use spaces if the total indent is less than the tab width, otherwise use both");
char *s = N_("_Spaces");
char *s = N_("Use spaces when inserting indentation");
char *s = N_("_Tabs");
char *s = N_("Use one tab per indent");
char *s = N_("Detect width from file");
char *s = N_("Whether to detect the indentation width from file contents when a file is opened");
char *s = N_("Type:");
char *s = N_("Tab key indents");
char *s = N_("Pressing tab/shift-tab indents/unindents instead of inserting a tab character");
char *s = N_("<b>Indentation</b>");
char *s = N_("Indentation");
char *s = N_("Snippet completion");
char *s = N_("Type a defined short character sequence and complete it to a more complex string using a single keypress");
char *s = N_("XML/HTML tag auto-closing");
char *s = N_("Insert matching closing tag for XML/HTML");
char *s = N_("Automatic continuation of multi-line comments");
char *s = N_("Continue automatically multi-line comments in languages like C, C++ and Java when a new line is entered inside such a comment");
char *s = N_("Autocomplete symbols");
char *s = N_("Automatic completion of known symbols in open files (function names, global variables, ...)");
char *s = N_("Autocomplete all words in document");
char *s = N_("Drop rest of word on completion");
char *s = N_("Max. symbol name suggestions:");
char *s = N_("Completion list height:");
char *s = N_("Characters to type for autocompletion:");
char *s = N_("The amount of characters which are necessary to show the symbol autocompletion list");
char *s = N_("Display height in rows for the autocompletion list");
char *s = N_("Maximum number of entries to display in the autocompletion list");
char *s = N_("Symbol list update frequency:");
char *s = N_("Minimal delay (in milliseconds) between two automatic updates of the symbol list. Note that a too short delay may have performance impact, especially with large files. A delay of 0 disables real-time updates.");
char *s = N_("<b>Completions</b>");
char *s = N_("Parenthesis ( )");
char *s = N_("Auto-close parenthesis when typing an opening one");
char *s = N_("Single quotes ' '");
char *s = N_("Auto-close single quote when typing an opening one");
char *s = N_("Curly brackets { }");
char *s = N_("Auto-close curly bracket when typing an opening one");
char *s = N_("Square brackets [ ]");
char *s = N_("Auto-close square-bracket when typing an opening one");
char *s = N_("Double quotes \" \"");
char *s = N_("Auto-close double quote when typing an opening one");
char *s = N_("<b>Auto-close quotes and brackets</b>");
char *s = N_("Completions");
char *s = N_("Invert syntax highlighting colors");
char *s = N_("Invert all colors, by default using white text on a black background");
char *s = N_("Show indentation guides");
char *s = N_("Shows small dotted lines to help you to use the right indentation");
char *s = N_("Show white space");
char *s = N_("Marks spaces with dots and tabs with arrows");
char *s = N_("Show line endings");
char *s = N_("Shows the line ending character");
char *s = N_("Show line numbers");
char *s = N_("Shows or hides the Line Number margin");
char *s = N_("Show markers margin");
char *s = N_("Shows or hides the small margin right of the line numbers, which is used to mark lines");
char *s = N_("Stop scrolling at last line");
char *s = N_("Whether to stop scrolling one page past the last line of a document");
char *s = N_("<b>Display</b>");
char *s = N_("Column:");
char *s = N_("Color:");
char *s = N_("Sets the color of the long line marker");
char *s = N_("Color Chooser");
char *s = N_("The long line marker is a thin vertical line in the editor, it helps to mark long lines, or as a hint to break the line. Set this value to a value greater than 0 to specify the column where it should appear.");
char *s = N_("Line");
char *s = N_("Prints a vertical line in the editor window at the given cursor position (see below)");
char *s = N_("Background");
char *s = N_("The background color of characters after the given cursor position (see below) changed to the color set below, (this is recommended if you use proportional fonts)");
char *s = N_("Enabled");
char *s = N_("<b>Long line marker</b>");
char *s = N_("Disabled");
char *s = N_("Do not show virtual spaces");
char *s = N_("Only for rectangular selections");
char *s = N_("Only show virtual spaces beyond the end of lines when drawing a rectangular selection");
char *s = N_("Always");
char *s = N_("Always show virtual spaces beyond the end of lines");
char *s = N_("<b>Virtual spaces</b>");
char *s = N_("Display");
char *s = N_("Editor");
char *s = N_("Open new documents from the command-line");
char *s = N_("Start a new file for each command-line filename that doesn't exist");
char *s = N_("Default end of line characters:");
char *s = N_("<b>New files</b>");
char *s = N_("Default encoding (new files):");
char *s = N_("Sets the default encoding for newly created files");
char *s = N_("Use fixed encoding when opening non-Unicode files");
char *s = N_("This option disables the automatic detection of the file encoding when opening non-Unicode files and opens the file with the specified encoding (usually not needed)");
char *s = N_("Default encoding (existing non-Unicode files):");
char *s = N_("Sets the default encoding for opening existing non-Unicode files");
char *s = N_("<b>Encodings</b>");
char *s = N_("Ensure new line at file end");
char *s = N_("Ensures that at the end of the file is a new line");
char *s = N_("Ensure consistent line endings");
char *s = N_("Ensures that newline characters always get converted before saving, avoiding mixed line endings in the same file");
char *s = N_("Strip trailing spaces and tabs");
char *s = N_("Removes trailing spaces and tabs and the end of lines");
char *s = N_("Replace tabs by space");
char *s = N_("Replaces all tabs in document by spaces");
char *s = N_("<b>Saving files</b>");
char *s = N_("Recent files list length:");
char *s = N_("Specifies the number of files which are stored in the Recent files list");
char *s = N_("Disk check timeout:");
char *s = N_("How often to check for changes to document files on disk, in seconds. Zero disables checking.");
char *s = N_("Files");
char *s = N_("Terminal:");
char *s = N_("Browser:");
/* xgettext:no-c-format */
char *s = N_("A terminal emulator command (%c is substituted with the Geany run script filename)");
char *s = N_("Path (and possibly additional arguments) to your favorite browser");
char *s = N_("Grep:");
char *s = N_("<b>Tool paths</b>");
char *s = N_("Context action:");
/* xgettext:no-c-format */
char *s = N_("Context action command. The currently selected word can be used with %s. It can appear anywhere in the given command and will be replaced before execution.");
char *s = N_("<b>Commands</b>");
char *s = N_("Tools");
char *s = N_("email address of the developer");
char *s = N_("Initials of the developer name");
char *s = N_("Initial version:");
char *s = N_("Version number, which a new file initially has");
char *s = N_("Company name");
char *s = N_("Developer:");
char *s = N_("Company:");
char *s = N_("Mail address:");
char *s = N_("Initials:");
char *s = N_("The name of the developer");
char *s = N_("Year:");
char *s = N_("Date:");
char *s = N_("Date & time:");
char *s = N_("Specify a format for the the {datetime} wildcard. You can use any conversion specifiers which can be used with the ANSI C strftime function.");
char *s = N_("Specify a format for the the {year} wildcard. You can use any conversion specifiers which can be used with the ANSI C strftime function.");
char *s = N_("Specify a format for the the {date} wildcard. You can use any conversion specifiers which can be used with the ANSI C strftime function.");
char *s = N_("<b>Template data</b>");
char *s = N_("Templates");
char *s = N_("C_hange");
char *s = N_("<b>Keyboard shortcuts</b>");
char *s = N_("Keybindings");
char *s = N_("Command:");
/* xgettext:no-c-format */
char *s = N_("Path to the command for printing files (use %f for the filename)");
char *s = N_("Use an external command for printing");
char *s = N_("Print line numbers");
char *s = N_("Add line numbers to the printed page");
char *s = N_("Print page numbers");
char *s = N_("Add page numbers at the bottom of each page. It takes 2 lines of the page.");
char *s = N_("Print page header");
char *s = N_("Add a little header to every page containing the page number, the filename and the current date (see below). It takes 3 lines of the page.");
char *s = N_("Use the basename of the printed file");
char *s = N_("Print only the basename (without the path) of the printed file");
char *s = N_("Date format:");
char *s = N_("Specify a format for the date and time stamp which is added to the page header on each page. You can use any conversion specifiers which can be used with the ANSI C strftime function.");
char *s = N_("Use native GTK printing");
char *s = N_("<b>Printing</b>");
char *s = N_("Printing");
char *s = N_("Font:");
char *s = N_("Sets the font for the terminal widget");
char *s = N_("Choose Terminal Font");
char *s = N_("Foreground color:");
char *s = N_("Background color:");
char *s = N_("Background image:");
char *s = N_("Scrollback lines:");
char *s = N_("Shell:");
char *s = N_("Sets the foreground color of the text in the terminal widget");
char *s = N_("Sets the background color of the text in the terminal widget");
char *s = N_("Sets the path to the background image in the terminal widget");
char *s = N_("Specifies the history in lines, which you can scroll back in the terminal widget");
char *s = N_("Sets the path to the shell which should be started inside the terminal emulation");
char *s = N_("Scroll on keystroke");
char *s = N_("Whether to scroll to the bottom if a key was pressed");
char *s = N_("Scroll on output");
char *s = N_("Whether to scroll to the bottom when output is generated");
char *s = N_("Cursor blinks");
char *s = N_("Whether to blink the cursor");
char *s = N_("Override Geany keybindings");
char *s = N_("Allows the VTE to receive keyboard shortcuts (apart from focus commands)");
char *s = N_("Disable menu shortcut key (F10 by default)");
char *s = N_("This option disables the keybinding to popup the menu bar (default is F10). Disabling it can be useful if you use, for example, Midnight Commander within the VTE.");
char *s = N_("Follow path of the current file");
char *s = N_("Whether to execute \\\"cd $path\\\" when you switch between opened files");
char *s = N_("Execute programs in the VTE");
char *s = N_("Run programs in VTE instead of opening a terminal emulation window. Please note, programs executed in VTE cannot be stopped");
char *s = N_("Don't use run script");
char *s = N_("Don't use the simple run script which is usually used to display the exit status of the executed program");
char *s = N_("<b>Terminal</b>");
char *s = N_("Terminal");
char *s = N_("<i>Warning: read the manual before changing these preferences.</i>");
char *s = N_("<b>Various preferences</b>");
char *s = N_("Various");
char *s = N_("Project Properties");
char *s = N_("Filename:");
char *s = N_("Name:");
char *s = N_("Description:");
char *s = N_("Base path:");
char *s = N_("File patterns:");
char *s = N_("Space separated list of file patterns used for the find in files dialog (e.g. *.c *.h)");
char *s = N_("Base directory of all files that make up the project. This can be a new path, or an existing directory tree. You can use paths relative to the project filename.");
char *s = N_("Project");
char *s = N_("Display:");
char *s = N_("Custom");
char *s = N_("Use global settings");
char *s = N_("Size:");
char *s = N_("Location:");
char *s = N_("Read-only:");
char *s = N_("Encoding:");
char *s = N_("Modified:");
char *s = N_("Changed:");
char *s = N_("Accessed:");
char *s = N_("(only inside Geany)");
char *s = N_("Permissions:");
char *s = N_("Read:");
char *s = N_("Write:");
char *s = N_("Execute:");
char *s = N_("Owner:");
char *s = N_("Group:");
char *s = N_("Other:");
char *s = N_("Top");
char *s = N_("_Toolbar Preferences");
char *s = N_("_Hide Toolbar");
char *s = N_("Geany");
char *s = N_("_File");
char *s = N_("New (with _Template)");
char *s = N_("_Open...");
char *s = N_("Recent _Files");
char *s = N_("Save _As...");
char *s = N_("Save A_ll");
char *s = N_("_Reload");
char *s = N_("R_eload As");
char *s = N_("Page Set_up");
char *s = N_("_Print...");
char *s = N_("Close Ot_her Documents");
char *s = N_("C_lose All");
char *s = N_("_Commands");
char *s = N_("_Cut Current Line(s)");
char *s = N_("_Copy Current Line(s)");
char *s = N_("_Delete Current Line(s)");
char *s = N_("_Duplicate Line or Selection");
char *s = N_("_Select Current Line(s)");
char *s = N_("_Select Current Paragraph");
char *s = N_("_Move Line(s) Up");
char *s = N_("_Move Line(s) Down");
char *s = N_("_Send Selection to Terminal");
char *s = N_("_Reflow Lines/Block");
char *s = N_("T_oggle Case of Selection");
char *s = N_("_Comment Line(s)");
char *s = N_("U_ncomment Line(s)");
char *s = N_("_Toggle Line Commentation");
char *s = N_("_Increase Indent");
char *s = N_("_Decrease Indent");
char *s = N_("_Smart Line Indent");
char *s = N_("_Send Selection to");
char *s = N_("I_nsert Comments");
char *s = N_("Preference_s");
char *s = N_("P_lugin Preferences");
char *s = N_("_Find...");
char *s = N_("Find _Next");
char *s = N_("Find _Previous");
char *s = N_("Find in F_iles...");
char *s = N_("_Replace...");
char *s = N_("Next _Message");
char *s = N_("Pr_evious Message");
char *s = N_("_Go to Next Marker");
char *s = N_("_Go to Previous Marker");
char *s = N_("_Go to Line...");
char *s = N_("Find Next _Selection");
char *s = N_("Find Pre_vious Selection");
char *s = N_("_Mark All");
char *s = N_("Go to T_ag Declaration");
char *s = N_("_View");
char *s = N_("Change _Font...");
char *s = N_("Change _Color Scheme...");
char *s = N_("Show _Markers Margin");
char *s = N_("Show _Line Numbers");
char *s = N_("Show _White Space");
char *s = N_("Show Line _Endings");
char *s = N_("Show _Indentation Guides");
char *s = N_("Full_screen");
char *s = N_("To_ggle All Additional Widgets");
char *s = N_("Show Message _Window");
char *s = N_("Show _Toolbar");
char *s = N_("Show Side_bar");
char *s = N_("_Document");
char *s = N_("_Line Wrapping");
char *s = N_("Line _Breaking");
char *s = N_("_Auto-indentation");
char *s = N_("In_dent Type");
char *s = N_("_Detect from Content");
char *s = N_("T_abs and Spaces");
char *s = N_("Indent Widt_h");
char *s = N_("_1");
char *s = N_("_2");
char *s = N_("_3");
char *s = N_("_4");
char *s = N_("_5");
char *s = N_("_6");
char *s = N_("_7");
char *s = N_("_8");
char *s = N_("Read _Only");
char *s = N_("_Write Unicode BOM");
char *s = N_("Set File_type");
char *s = N_("Set _Encoding");
char *s = N_("Set Line E_ndings");
char *s = N_("Convert and Set to _CR/LF (Win)");
char *s = N_("Convert and Set to _LF (Unix)");
char *s = N_("Convert and Set to CR (_Mac)");
char *s = N_("_Clone");
char *s = N_("_Strip Trailing Spaces");
char *s = N_("_Replace Tabs by Spaces");
char *s = N_("Replace Spaces b_y Tabs...");
char *s = N_("_Fold All");
char *s = N_("_Unfold All");
char *s = N_("Remove _Markers");
char *s = N_("Remove Error _Indicators");
char *s = N_("_Project");
char *s = N_("_New...");
char *s = N_("_Recent Projects");
char *s = N_("_Close");
char *s = N_("Apply the default indentation settings to all documents");
char *s = N_("_Apply Default Indentation");
char *s = N_("_Build");
char *s = N_("_Tools");
char *s = N_("_Reload Configuration");
char *s = N_("C_onfiguration Files");
char *s = N_("_Color Chooser");
char *s = N_("_Word Count");
char *s = N_("Load Ta_gs...");
char *s = N_("_Help");
char *s = N_("_Keyboard Shortcuts");
char *s = N_("Debug _Messages");
char *s = N_("_Website");
char *s = N_("Wi_ki");
char *s = N_("Report a _Bug...");
char *s = N_("_Donate...");
char *s = N_("Symbols");
char *s = N_("Documents");
char *s = N_("Status");
char *s = N_("Compiler");
char *s = N_("Messages");
char *s = N_("Scribble");
